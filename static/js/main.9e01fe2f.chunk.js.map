{"version":3,"sources":["conf/consts.js","hooks/useFetch.js","hooks/useLocalData.js","components/UI/Evolutions.js","components/UI/Card.js","components/screens/List.js","components/screens/Detail.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","useFetch","url","useState","loading","setLoading","data","setData","useEffect","a","fetch","response","json","console","error","fetchData","useLocalData","key","slugify","fromLocalStorage","window","localStorage","getItem","dataFromLocalStorage","JSON","parse","setItem","stringify","Evolutions","evolves_from_species","className","name","Card","getDataUrl","location","href","substr","lastIndexOf","types","map","type","slot","getTypes","src","sprites","front_default","alt","id","species","List","searchTerm","setSearchTerm","searchResults","setSearchResults","results","filter","item","toLowerCase","includes","placeholder","value","onChange","e","target","to","pathname","Detail","Location","useLocation","App","basename","process","exact","path","render","props","component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9e01fe2f.chunk.js","sourcesContent":["export const API_URL = 'https://pokeapi.co/api/v2/pokemon/';\n\nexport const API_FALLBACK = 'http://pokeapi.salestock.net/api/v2/pokemon/';\n","/**\n * From https://github.com/ger86/coronavirus\n */\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n        setLoading(false);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    fetchData();\n  }, [url]);\n\n  return {data, loading};\n\n};\n\nexport default useFetch;\n","/**\n * From https://github.com/ger86/coronavirus\n */\nimport slugify from 'slugify';\nimport useFetch from './useFetch';\n\nconst useLocalData = (url) => {\n\n  const key = slugify(url);\n\n  const fromLocalStorage = window.localStorage.getItem(key);\n\n  const dataFromLocalStorage = fromLocalStorage ? JSON.parse(fromLocalStorage) : null;\n\n  const { data, loading } = useFetch(url);\n\n  if (data) {\n    window.localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  return {\n    data: data || dataFromLocalStorage,\n    loading: loading && !dataFromLocalStorage\n  };\n};\n\nexport default useLocalData;","import React from 'react';\nimport useLocalData from 'hooks/useLocalData';\n\nconst Evolutions = ({url}) => {\n\n    const { data, loading } = useLocalData(url);\n\n    if (loading) {\n        return <p>Cargando evoluciones...</p>\n    }\n    return (\n        <>\n            {data.evolves_from_species\n            ? <h3 className=\"card__extra -font-light\">Evoluciona de:\n                <span className=\"o-heading--h2 card__extra--ft\">{data.evolves_from_species.name}</span>\n            </h3>\n            : null}\n        </>\n    );\n};\n\nexport default Evolutions;\n","import React from 'react';\nimport useLocalData from 'hooks/useLocalData';\nimport Evolutions from './Evolutions';\nimport { API_URL } from 'conf/consts';\n\nconst Card = ({url}) => {\n\n    let getDataUrl = url;\n\n    if (!url) {\n        const location = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);\n        getDataUrl = API_URL + location;\n    }\n\n    const { data, loading } = useLocalData(getDataUrl);\n\n    if (loading) {\n        return <div className=\"card\">Cargando datos del Pokemon...</div>;\n    }\n\n    const getTypes = (types) => types.map((type) => <span className=\"tag -text-tag\" key={type.slot}>{type.type.name}</span>);\n\n    const types = getTypes(data.types);\n\n    return (\n        <div className=\"card -full-screen\">\n            <figure className=\"card__figure\">\n                <img\n                    src={data.sprites.front_default}\n                    alt={data.name}\n                    className=\"card__img\"\n                />\n                <figcaption className=\"card__caption badge -text-tag\">ID / {data.id}</figcaption>\n            </figure>\n            <div className=\"card__content\">\n                <h2 className=\"card__title\">{data.name}</h2>\n                <p className=\"card__tags\">{types}</p>\n                <Evolutions url={data.species.url} />\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../UI/Card';\n\n\nconst List = ({data}) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n\n    const handleChange = (e) => {\n        setSearchTerm(e.target.value);\n    };\n\n    useEffect(() => {\n        const results = data.filter(item =>\n            item.name.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n        setSearchResults(results);\n    }, [data, searchTerm]);\n    \n    return (\n        <div className=\"o-grid o-grid--3c\">\n            <input\n                type=\"text\"\n                placeholder=\"Filtra Pokemons por nombre...\"\n                value={searchTerm}\n                onChange={handleChange}\n                className=\"o-grid--avoid-cols filter\"\n            />\n            {searchResults.map((item) => (\n                <Link to={\n                    {\n                        pathname: `/${item.name}`,\n                        url: item.url\n                    }\n                } key={item.name} >\n                    <Card url={item.url} />\n                </Link>\n            ))}\n        </div>\n    );\n} \n\nexport default List;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Card from '../UI/Card';\n\n\nconst Detail = () => {\n\n    const Location = useLocation();\n    \n    return (\n        <div className=\"o-grid\">\n            <Link to='/' >\n                <Card url={Location.url} />\n            </Link>\n        </div>\n    );\n} \n\nexport default Detail;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { API_URL } from './conf/consts';\nimport useLocalData from './hooks/useLocalData';\nimport List from './components/screens/List';\nimport Detail from './components/screens/Detail';\nimport 'App.scss';\n\nfunction App() {\n  const { data, loading } = useLocalData(API_URL);\n\n  if (loading) {\n    return (<p>Cargando Pokemons...</p>);\n  }\n\n  return (\n    <div className=\"o-frame\">\n      <div className=\"o-frame__top\"></div>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <List {...props} data={data.results} />} />\n          <Route path=\"/:name\" component={Detail} />\n        </Switch>\n      </Router>\n      <div className=\"o-frame__bottom\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}